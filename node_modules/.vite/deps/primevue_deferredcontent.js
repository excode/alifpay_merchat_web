import {
  script
} from "./chunk-4YDNLASL.js";
import "./chunk-DC6FPUCJ.js";
import {
  createCommentVNode,
  createElementBlock,
  mergeProps,
  openBlock,
  renderSlot
} from "./chunk-G4DFXOZZ.js";
import "./chunk-7FP5O474.js";

// node_modules/primevue/deferredcontent/deferredcontent.esm.js
var script2 = {
  name: "DeferredContent",
  extends: script,
  emits: ["load"],
  data() {
    return {
      loaded: false
    };
  },
  mounted() {
    if (!this.loaded) {
      if (this.shouldLoad())
        this.load();
      else
        this.bindScrollListener();
    }
  },
  beforeUnmount() {
    this.unbindScrollListener();
  },
  methods: {
    bindScrollListener() {
      this.documentScrollListener = () => {
        if (this.shouldLoad()) {
          this.load();
          this.unbindScrollListener();
        }
      };
      window.addEventListener("scroll", this.documentScrollListener);
    },
    unbindScrollListener() {
      if (this.documentScrollListener) {
        window.removeEventListener("scroll", this.documentScrollListener);
        this.documentScrollListener = null;
      }
    },
    shouldLoad() {
      if (this.loaded) {
        return false;
      } else {
        const rect = this.$refs.container.getBoundingClientRect();
        const docElement = document.documentElement;
        const winHeight = docElement.clientHeight;
        return winHeight >= rect.top;
      }
    },
    load(event) {
      this.loaded = true;
      this.$emit("load", event);
    }
  }
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", mergeProps({ ref: "container" }, _ctx.ptm("root")), [
    $data.loaded ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true)
  ], 16);
}
script2.render = render;
export {
  script2 as default
};
//# sourceMappingURL=primevue_deferredcontent.js.map
